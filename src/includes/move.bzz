# Lennard-Jones parameters
TARGET     = 283.0
EPSILON    = 150.0


# Lennard-Jones interaction magnitude
function lj_magnitude(dist, target, epsilon) {
    return -(epsilon / dist) * ((target / dist)^4 - (target / dist)^2)
}
 
# Neighbor data to LJ interaction vector
function lj_vector(rid, data) {
    return math.vec2.newp(lj_magnitude(data.distance, TARGET, EPSILON), data.azimuth)
}
 
# Accumulator of neighbor LJ interactions
function lj_sum(rid, data, accum) {
    return math.vec2.add(data, accum)
}
 
# Calculates and actuates the flocking interaction
function move_hexagon() {
    # Calculate accumulator
    var accum = neighbors.map(lj_vector).reduce(lj_sum, math.vec2.new(0.0, 0.0))

    if(neighbors.count() > 0) {
        math.vec2.scale(accum, 1.0 / neighbors.count())
    }

    # Move according to vector
    gotoc(accum.x, accum.y)
}

# Random walk search

function init_random_search(){
 # Set first search position
    next_position = {}
    next_position.x = pose.position.x
    next_position.y = pose.position.y 
}

function random_search()
{ 
  next_position.x = uniform(math.max(next_position.x-SEARCH_SPEED/100, SEARCH_SPACE.minx), math.min(next_position.x+SEARCH_SPEED/100, SEARCH_SPACE.maxx))
  next_position.y = uniform(math.max(next_position.y-SEARCH_SPEED/100, SEARCH_SPACE.miny), math.min(next_position.y+SEARCH_SPEED/100, SEARCH_SPACE.maxy))

  next_position_local = math.vec2.rotate(math.vec2.sub(next_position, pose.position), -pose.orientation.yaw)

  scaled_direction = math.vec2.scale(next_position_local, SEARCH_SPEED)

  gotoc(scaled_direction.x, scaled_direction.y)
}

function init_move_to_corner(){
    spawn_position = {}
    corner_position = {}

    spawn_position.x = pose.position.x
    spawn_position.y = pose.position.y

    if (spawn_position.x >= 0){
        corner_position.x = 9.0
    } else{
        corner_position.x = -9.0
    }

    if (spawn_position.y >= 0){
        corner_position.y = 9.0
    } else{
        corner_position.y = -9.0
    }
}

function move_to_corner(){
    corner_position_local = math.vec2.rotate(math.vec2.sub(corner_position, pose.position), -pose.orientation.yaw)
    scaled_corner_direction = math.vec2.scale(corner_position_local, SEARCH_SPEED)

    gotoc(scaled_corner_direction.x, scaled_corner_direction.y)
}