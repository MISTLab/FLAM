include "includes/metadata.bzz"


function init_available_storage() {
    storage = {}
}

function storage_create(coordinates, value) {
    storage[coordinates] = {
        .value = value,
        .metadata = metadata.new(current_step, current_step, get_data_size(value), coordinates)
    }
}

function storage_update(coordinates, value) {
    if (storage[coordinates] != nil) {
        storage[coordinates].value = value
        storage[coordinates].metadata.timestamp_used = current_step
    } else {
        storage_create(coordinates, value)
    }
}

# Receives the coordinates of the value to be deleted as a key
function storage_delete(coordinates) {
    storage[coordinates] = nil
}

function storage_get(coordinates) {
    storage[coordinates].metadata.timestamp_used = current_step

    return storage[coordinates]
}

function get_available_storage() {
    if (id == 0){
        return INFINITY
    }

    storage_used = 0
    foreach(storage, function(key, value) {
        storage_used = storage_used + value.metadata.size
    })

    return STORAGE_CAPACITY - storage_used
}

function storage_least_recently_used_id() {
    lru_timestamp = INFINITY
    lru_id = nil

    foreach(storage, function(coordinates, item) {
        if (item.metadata.timestamp_used < lru_timestamp) {
            lru_timestamp = item.metadata.timestamp_used
            lru_id = coordinates
        }
    })

    return lru_id
}

function get_data_size(data) {
    if (type(data) == "float" or type(data == "string")) {
        return 1
    } else if (type(data) == "table") {
        return 2 * size(data)
    }
}
