include "string.bzz"


FILE_PREFIX = string.concat("results/", string.tostring(id), "_")


#
# Class: CSVLogger
# Description: A generic CSV logger using standard Buzz IO functions.
#
CSVLogger = {
    # Static attribute
    .current_run = 0,

    #
    # Constructor
    # PARAM file_name: The file name.
    # PARAM header: A string representing the column headers.
    # RETURN: A new CSVLogger
    #
    .new = function(file_name, header) {
        CSVLogger.init_file(file_name, header)

        return {
            .file_name = string.concat(FILE_PREFIX, file_name),
            .current_run = CSVLogger.current_run,
            .write_row = CSVLogger.write_row
        }
    },

    #
    # If the file did not previously exist, create it (and its header).
    # PARAM file_name: The file name.
    # PARAM header: A string representing the column headers.
    # RETURN: nil
    #
    .init_file = function(file_name, header) {
        verification_file = io.fopen(string.concat(FILE_PREFIX, file_name), "r")

        # If file is nil, it means it was not created before and we can initialize it
        if (verification_file == nil) {
            result_file = io.fopen(string.concat(FILE_PREFIX, file_name), "w")
            io.fwrite(result_file, string.concat("id,run,step,", header))
            io.fclose(result_file)
        } else {
            io.fclose(verification_file)
        }
    },

    #
    # Writes a row into the CSV file using the provided data.
    # PARAM data: The data, in a table format.
    #             The integer keys correspond to the CSV column order.
    #             For example, { .1 = "1", .0 = "0", .2 = "2"} is stored as "0,1,2".
    #             This order excludes the run and step columns, which are always at the start.
    # RETURN: nil
    #
    .write_row = function(data) {
        comma_separated_data = string.concat(string.tostring(id), ",", string.tostring(self.current_run), ",", string.tostring(current_step))

        foreach(data, function(key, value) {
            comma_separated_data = string.concat(comma_separated_data, ",", string.tostring(value))
        })

        result_file = io.fopen(self.file_name, "a")
        io.fwrite(result_file, comma_separated_data)
        io.fclose(result_file)
    },

    #
    # Updates the current run number.
    # RETURN: nil
    #
    .update_current_run = function() {
        CSVLogger.current_run = 0

        run_file = io.fopen(string.concat("results/run_", string.tostring(id), ".txt"), "a+")

        io.fforeach(run_file, function(line) {
            CSVLogger.current_run = CSVLogger.current_run + 1
        })
        
        io.fwrite(run_file, CSVLogger.current_run)
        io.fclose(run_file)
    }
}
