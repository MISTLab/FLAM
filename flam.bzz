include "vec2.bzz"
include "string.bzz"
include "table.bzz"
include "queue.bzz"

include "includes/logging.bzz"
include "includes/move.bzz"
include "includes/constants.bzz"
include "includes/failure.bzz"
include "includes/radiation_sensor.bzz"
include "includes/radiation.bzz"
include "includes/comm.bzz"
include "includes/stigmergy.bzz"
include "includes/voting.bzz"
include "includes/consensus.bzz"

function init() {
    current_step = 3

    math.rng.setseed(907998 + id)

    sources = {
      .0 = radiation_source.new(-6.5, -5.5, 0.25),
      .1 = radiation_source.new(-3.5, -3.5, 0.25),
      .2 = radiation_source.new(0.5, 6.5, 0.25),
      .3 = radiation_source.new(3.5, 4.5, 0.25)
    }
    sensor = radiation_sensor.new(sources)

    set_leds(0, 255, 0)
    init_log()
    init_random_search()
    init_comm()
    init_stigmergy()
}

# Executed every time step
function step() {
    if (current_step >= EXPERIMENT_LENGTH or is_failed()) {
      set_wheels(0.0, 0.0)
      set_leds(255, 0, 0)
      return
    }

    update_comm()
    stage = current_step % FLAM_OBSERVATION_WINDOW
    if (stage == 0) {
      update_stigmergy()
    } else if (stage == 1) {
      update_voting()
      reset_comm()
    } else if (stage == 2) {
      update_consensus()
    }

    # Stop robots when experiment is over
    if (current_step == EXPERIMENT_LENGTH) {
        log("Experiment terminated")
        set_wheels(0.0, 0.0)
        set_leds(255, 0, 0)
    }

    random_search()
    current_step = current_step + 1
}

function reset() {
}
 
function destroy() {
}
