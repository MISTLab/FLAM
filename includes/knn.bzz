include "includes/constants.bzz"
include "includes/hamming.bzz"

knn_neighbors = {
  .10 = 32,
  .11 = 48,
  .12 = 57,
  .13 = 57,
  .14 = 4,
  .15 = 7,
  .16 = 9,
  .17 = 10,
  .18 = 11,
  .19 = 12
}

knn_classes = {.10=1,.11=1,.12=1,.13=1,.14=1,.15=1,.16=1,.17=1,.18=1,.19=1}

function flam_knn(fvs) {
  foreach(fvs, function(robot_id, fv) {
    if (fv != 256) {
      knn_neighbors[robot_id] = fv
    }
    if (failed_robots[robot_id] == 0) {
      knn_classes[robot_id] = 2
    } else {
      knn_classes[robot_id] = 1
    }
  })

  for (i = 0, i < NUMBER_OF_ROBOTS, i = i + 1) {
    var flip = hamming_flip(fvs[i])

    local_values = {.0=flip,.1=flip,.2=flip}
    local_classes = {.0=-1,.1=-1,.2=-1}
    neighborhood = reduce(knn_neighbors, function(key, value, accumulator) {
      if (key == i) {
        return accumulator
      }
      var next_acc = {.0=accumulator[0],.1=accumulator[1],.2=accumulator[2]}
      var dist = hamming(value, fvs[i])
      if (dist < accumulator[0]) {
        local_values[2] = local_values[1]
        local_classes[2] = local_classes[1]
        next_acc[2] = accumulator[1]

        local_values[1] = local_values[0]
        local_classes[1] = local_classes[0]
        next_acc[1] = accumulator[0]

        local_values[0] = value
        local_classes[0] = knn_classes[key]
        next_acc[0] = dist
      } else if (dist < accumulator[1]) {
        local_values[2] = local_values[1]
        local_classes[2] = local_classes[1]
        next_acc[2] = accumulator[1]

        local_values[1] = value
        local_classes[1] = knn_classes[key] 
        next_acc[1] = dist
      } else if (dist < accumulator[2]) {
        local_values[2] = value
        local_classes[2] = knn_classes[key]
        next_acc[2] = dist
      }

      if (verbose == 2) {
        foreach(local_values, function(vk, vv) {
          flog(string.concat("v ", string.tostring(vk), ", ",string.tostring(vv)))
        })
        foreach(local_classes, function(ck, cv) {
          flog(string.concat("c ", string.tostring(ck), ", ",string.tostring(cv)))
        })
        foreach(next_acc, function(ak, av) {
          flog(string.concat("ak", string.tostring(ak), ", ",string.tostring(av)))
        })
        flog("")
      }

      return next_acc
    }, {.0=INFINITY,.1=INFINITY,.2=INFINITY})

    num_for = 0
    num_against = 0
    var vote = 0
    foreach(local_classes, function(key, value) {
      if (value == 2) {
        num_for = num_for + 1
      } else if (value == 1) {
        num_against = num_against + 1
      }
    })
    if (num_for < num_against) {
      vote = 1
    } else {
      vote = 2
    }
    stigmergy_fv.put(string.concat("v", string.tostring(id), "_", string.tostring(i)), vote)
  }
}
