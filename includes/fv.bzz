##
# @file fv.bzz
#
# Compute feature vector values from sensor readings and local neighbor
# information

include "includes/constants.bzz"
include "includes/chassis.bzz"

##
# Observed neighbor feature estimation time window, in time steps
#
# Feature vector components based on estimated local neighbor data are updated
# every FLAM_OBSERVATION_WINDOW time steps.
#
# @const {int}
# @default
FLAM_OBSERVATION_WINDOW = 50

##
# Tolerance threshold accomodating for odometric noise in observed
# robot motion speed.
#
# @const {float}
# @default
FLAM_MOTOR_SPEED_ODOMETRIC_THRESHOLD = 0.15

##
# Tolerance threshold accomodating for odometric noise in observed
# robot heading change speed.
#
# @const {float}
# @default
FLAM_HEADING_ODOMETRIC_THRESHOLD = 0.1

##
# Tolerance threshold accomodating for odometric noise in estimated
# robot heading change probability.
#
# @const {float}
# @default
FLAM_HEADING_CHANGE_PROBABILITY_ODOMETRIC_THRESHOLD = 0.05

##
# Check close neighbor density
#
# **REQUIRES** Up-to-date neighbor observations @link {update_comm}
#
# @return {boolean} At least one 'close' neighbor was observed for half the
# sliding observation window @link {FLAM_OBSERVATION_WINDOW}
function robot_density_inner() {
  return (flam_comm_observed_inner > (FLAM_OBSERVATION_WINDOW / 2.0))
}

##
# Check distant neighbor density
#
# **REQUIRES** Up-to-date neighbor observations @link {update_comm}
#
# @return {boolean} At least one 'distant' neighbor was observed for half the
# sliding observation window @link {FLAM_OBSERVATION_WINDOW}
function robot_density_outer() {
  return (flam_comm_observed_outer > (FLAM_OBSERVATION_WINDOW / 2.0))
}

##
# Check if current robot is displaying forward motion
#
# Compute feature vector based on observed linear speed.
#
# **REQUIRES** Up-to-date self speed readings @link {random_search}
# **REQUIRES** Up-to-date neighbor speed readings @link {update_comm}
#
# @return {boolean} Robot is moving
function robot_moving() {
  return (flam_comm_travelled_distance > FLAM_MOTOR_SPEED_ODOMETRIC_THRESHOLD * FLAM_OBSERVATION_WINDOW * SEARCH_SPEED)
}

##
# Check if current robot is displaying angular motion
#
# **REQUIRES** Up-to-date self speed readings @link {random_search}
# **REQUIRES** Up-to-date neighbor speed readings @link {update_comm}
#
# @private
# @return {boolean} Robot is turning
function robot_turning() {
  return (((flam_comm_angular_accel / FLAM_MAX_ANGULAR_ACCEL) *
           (flam_comm_travelled_distance / FLAM_OBSERVATION_WINDOW /
            SEARCH_SPEED)) > FLAM_HEADING_ODOMETRIC_THRESHOLD)
}

##
# Check the proportion of time steps where the robot changed its heading.
#
# **REQUIRES** Up-to-date self speed readings @link {random_search}
# **REQUIRES** Up-to-date neighbor speed readings @link {update_comm}
#
# @return {boolean} Robot has been turning more than 5% of the time
function robot_bayes_turning() {
  return ((flam_comm_num_heading_changes / FLAM_OBSERVATION_WINDOW) >
          FLAM_HEADING_CHANGE_PROBABILITY_ODOMETRIC_THRESHOLD)
}

##
# Check for heading changes in presence of sensor input.
#
# **REQUIRES** Up-to-date self speed readings @link {random_search}
# **REQUIRES** Up-to-date neighbor speed readings @link {update_comm}
#
# @return {boolean} Robot alters its heading in response to sensor input
function robot_turning_sensor() {
  return ((flam_comm_num_heading_changes_sensor / FLAM_OBSERVATION_WINDOW) > FLAM_HEADING_CHANGE_PROBABILITY_ODOMETRIC_THRESHOLD)
}

##
# Check for heading changes in the absence of sensor input.
#
# **REQUIRES** Up-to-date self speed readings @link {random_search}
# **REQUIRES** Up-to-date neighbor speed readings @link {update_comm}
#
# @return {boolean} Robot alters its heading without sensor input
function robot_turning_no_sensor() {
  return ((flam_comm_num_heading_changes_no_sensor / FLAM_OBSERVATION_WINDOW) > FLAM_HEADING_CHANGE_PROBABILITY_ODOMETRIC_THRESHOLD)
}
