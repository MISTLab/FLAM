include "includes/chassis.bzz"

# Lennard-Jones parameters
TARGET     = 283.0
EPSILON    = 150.0

slippage = 0
sensor_saturation = 0

# Lennard-Jones interaction magnitude
function lj_magnitude(dist, target, epsilon) {
    return -(epsilon / dist) * ((target / dist)^4 - (target / dist)^2)
}
 
# Neighbor data to LJ interaction vector
function lj_vector(rid, data) {
    return math.vec2.newp(lj_magnitude(data.distance, TARGET, EPSILON), data.azimuth)
}
 
# Accumulator of neighbor LJ interactions
function lj_sum(rid, data, accum) {
    return math.vec2.add(data, accum)
}
 
# Calculates and actuates the flocking interaction
function move_hexagon() {
    # Calculate accumulator
    var accum = neighbors.map(lj_vector).reduce(lj_sum, math.vec2.new(0.0, 0.0))

    if(neighbors.count() > 0) {
        math.vec2.scale(accum, 1.0 / neighbors.count())
    }

    # Move according to vector
    gotoc(accum.x, accum.y)
}

# Random walk search

function init_random_search(){
 # Set first search position
    next_position = {}
    next_position.x = pose.position.x
    next_position.y = pose.position.y 
}

function random_search()
{ 
  next_position.x = uniform(math.max(next_position.x-SEARCH_SPEED/10, SEARCH_SPACE.minx), math.min(next_position.x+SEARCH_SPEED/10, SEARCH_SPACE.maxx))
  next_position.y = uniform(math.max(next_position.y-SEARCH_SPEED/10, SEARCH_SPACE.miny), math.min(next_position.y+SEARCH_SPEED/10, SEARCH_SPACE.maxy))

  next_position_local = math.vec2.rotate(math.vec2.sub(next_position, pose.position), -pose.orientation.yaw)

  scaled_direction = math.vec2.scale(next_position_local, SEARCH_SPEED)

  if (pose.position.x < -4.0 and pose.position.y > 6.0) {
    slippage = slippage + 1
    if (slippage == 5*FLAM_OBSERVATION_WINDOW) {
      flog("[flt] enter slippage")
    }

    #log("[slippage] ", id, " ", pose.position.x, " ", pose.position.y)
    scaled_direction = math.vec2.scale(scaled_direction, 0.10)
  } else {
    if (slippage > 5*FLAM_OBSERVATION_WINDOW) {
      flog("[flt] exit slippage")
    }
    slippage = 0
  }
  if (pose.position.x > 4.0 and pose.position.y < -6.0) {
    sensor_saturation = sensor_saturation + 1
    if (sensor_saturation == 5*FLAM_OBSERVATION_WINDOW) {
      flog("[flt] enter saturation")
    }
  } else {
    if (sensor_saturation > 5*FLAM_OBSERVATION_WINDOW) {
      flog("[flt] exit saturation")
    }
    sensor_saturation = 0
  }

  # Update self motion speed readings
  var delta_pos = chassis_delta_pos(scaled_direction.x, scaled_direction.y)
  flam_comm_travelled_distance = flam_comm_travelled_distance + math.vec2.length(delta_pos)

  var delta_w = chassis_delta_heading(scaled_direction.x, scaled_direction.y)
  flam_comm_angular_speed_prev_prev = flam_comm_angular_speed_prev
  flam_comm_angular_speed_prev = flam_comm_angular_speed_current
  flam_comm_angular_speed_current = delta_w / TIMESTEP_DURATION
  flam_comm_angular_accel = 2.0 * (flam_comm_angular_speed_current - flam_comm_angular_speed_prev_prev) / TIMESTEP_DURATION
  if (robot_turning()) {
    flam_comm_num_heading_changes = flam_comm_num_heading_changes + 1
  }

  gotoc(scaled_direction.x, scaled_direction.y)
  #gotoc_buzz(scaled_direction)
}

function init_move_to_corner(){
    spawn_position = {}
    corner_position = {}

    spawn_position.x = pose.position.x
    spawn_position.y = pose.position.y

    if (spawn_position.x >= 0){
        corner_position.x = 7.0
    } else{
        corner_position.x = -7.0
    }

    if (spawn_position.y >= 0){
        corner_position.y = 7.0
    } else{
        corner_position.y = -7.0
    }
}

function move_to_corner(){
    corner_position_local = math.vec2.rotate(math.vec2.sub(corner_position, pose.position), -pose.orientation.yaw)
    scaled_corner_direction = math.vec2.scale(corner_position_local, 100)

    gotoc(scaled_corner_direction.x, scaled_corner_direction.y)
}

function gotoc_buzz(vec){
    vec_norm = math.vec2.norm(vec)
    target_x = vec_norm.x
    target_y = vec_norm.y  

    if (target_x > 0){
        if (target_y > 0) {
            # Turn left
            left_wheel_speed = (1 - target_y) * SEARCH_SPEED
            right_wheel_speed = SEARCH_SPEED
        } else {
            # Turn right
            left_wheel_speed = SEARCH_SPEED
            right_wheel_speed =  (1 + target_y) * SEARCH_SPEED
        }
    } else if (target_y > 0) {
        # Turn around left
        left_wheel_speed = -0.5*SEARCH_SPEED
        right_wheel_speed =  0.5*SEARCH_SPEED
    } else {
        # Turn around right
        left_wheel_speed = 0.5*SEARCH_SPEED
        right_wheel_speed = -0.5*SEARCH_SPEED
    }

    set_wheels(left_wheel_speed, right_wheel_speed)

}
