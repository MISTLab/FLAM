function update_consensus() {
  var against = ""
  for (i = 0, i < NUMBER_OF_ROBOTS, i = i + 1) {
    if (failed_robots[i] == 1) {
      against = string.concat(against, "X")
      i = i + 1
    }


    var num_for = 0
    var num_against = 0
    for (j = 0, j < NUMBER_OF_ROBOTS, j = j + 1) {
      vote = stigmergy_fv.get(string.concat("v", string.tostring(j), "_", string.tostring(i)))
      if (vote == 2 and failed_robots[j] == 0) {
        num_for = num_for + 1
      } else if (vote == 1 and failed_robots[j] == 0) {
        num_against = num_against + 1
      }
    }
    against = string.concat(against, string.tostring(num_against))

    var num_faulty = stigmergy_fv.get(string.concat("n", string.tostring(i)))
    if (num_faulty == nil) {
      num_faulty = 0
    }

    if (num_for < num_against and num_against > 2) {
      if (verbose == 2) {
        flog(string.concat("[cns:", string.tostring(stigmergy_fv.id), "] Robot ", string.tostring(i), " is faulty"))
      }
      num_faulty = num_faulty + 1
      if (num_faulty == 2) {
        flog(string.concat("[cns:", string.tostring(stigmergy_fv.id), "] Robot ", string.tostring(i), " failed"))
        failed_robots[i] = 1
        neighbors.broadcast("shutdown", i)
        if (i == id) {
          flog(string.concat("[map] Failed at ",
              string.tostring(pose.position.x), ", ",
              string.tostring(pose.position.y)
          ))
        }
      }
    } else {
      num_faulty = 0
    }

    stigmergy_fv.put(string.concat("n", string.tostring(i)), num_faulty)
  }
  if (verbose) {
    flog(string.concat("[cns:", string.tostring(stigmergy_fv.id), "] ", against))
  }
}
